//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input system/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControlsC: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControlsC()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Wizard"",
            ""id"": ""383e09c9-987e-42f8-bd7e-0738d1b0794f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""1bd09070-5664-4b01-a52a-619563cf3128"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f3fafa1f-0c3b-47c5-afa4-147b453f9e85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""7cd6dfa2-70e6-461e-bcd1-f27a19c39d86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""cb10c500-87de-4c60-9706-b91aa02bf78f"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a696a1e7-3d51-40b6-aba5-6fe18f92fb9d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4b7d991c-5c13-421c-b748-9ac998ce213f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Wizard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d564b606-10b5-47a3-be6c-843f4ba295ce"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Wizard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d2b95127-a63e-41a0-8be9-fb9dd6d9f39f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Wizard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9039dd18-9706-48b1-b8a0-d40f2f65963e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Wizard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""da4544b9-ad45-41de-b91d-d1f3543a3d99"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Wizard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9381b8fa-05f5-4140-877d-0cc51e27df03"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Wizard"",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Wizard"",
            ""bindingGroup"": ""Wizard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Wizard
        m_Wizard = asset.FindActionMap("Wizard", throwIfNotFound: true);
        m_Wizard_Movement = m_Wizard.FindAction("Movement", throwIfNotFound: true);
        m_Wizard_Interact = m_Wizard.FindAction("Interact", throwIfNotFound: true);
        m_Wizard_Throw = m_Wizard.FindAction("Throw", throwIfNotFound: true);
    }

    ~@PlayerControlsC()
    {
        UnityEngine.Debug.Assert(!m_Wizard.enabled, "This will cause a leak and performance issues, PlayerControlsC.Wizard.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Wizard
    private readonly InputActionMap m_Wizard;
    private List<IWizardActions> m_WizardActionsCallbackInterfaces = new List<IWizardActions>();
    private readonly InputAction m_Wizard_Movement;
    private readonly InputAction m_Wizard_Interact;
    private readonly InputAction m_Wizard_Throw;
    public struct WizardActions
    {
        private @PlayerControlsC m_Wrapper;
        public WizardActions(@PlayerControlsC wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Wizard_Movement;
        public InputAction @Interact => m_Wrapper.m_Wizard_Interact;
        public InputAction @Throw => m_Wrapper.m_Wizard_Throw;
        public InputActionMap Get() { return m_Wrapper.m_Wizard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WizardActions set) { return set.Get(); }
        public void AddCallbacks(IWizardActions instance)
        {
            if (instance == null || m_Wrapper.m_WizardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WizardActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Throw.started += instance.OnThrow;
            @Throw.performed += instance.OnThrow;
            @Throw.canceled += instance.OnThrow;
        }

        private void UnregisterCallbacks(IWizardActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Throw.started -= instance.OnThrow;
            @Throw.performed -= instance.OnThrow;
            @Throw.canceled -= instance.OnThrow;
        }

        public void RemoveCallbacks(IWizardActions instance)
        {
            if (m_Wrapper.m_WizardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWizardActions instance)
        {
            foreach (var item in m_Wrapper.m_WizardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WizardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WizardActions @Wizard => new WizardActions(this);
    private int m_WizardSchemeIndex = -1;
    public InputControlScheme WizardScheme
    {
        get
        {
            if (m_WizardSchemeIndex == -1) m_WizardSchemeIndex = asset.FindControlSchemeIndex("Wizard");
            return asset.controlSchemes[m_WizardSchemeIndex];
        }
    }
    public interface IWizardActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
    }
}
